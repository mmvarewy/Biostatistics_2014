model {
# Random effects logistic regression part of model
for( i in 1: n ){
	logit(rho[i]) <- center.effect[C[i]] + fixed[i]
	y[i] ~ dbern(rho[i])
	C[i] <- Z[center[i]]
	fixed[i] <- inprod(beta[], L[i,])

	for(j in 1:m){
		logit(out[i,j]) <- center.effect[Z[j]] + fixed[i]   # outcome of interest
	} 
}

for(j in 1:m){
	Z[j] ~ dcat(p[])   # allocation variable
	center.effect[j] ~ dnorm(theta[Z[j]], clustertau[Z[j]])

	mean.pop.out[j] <- mean(out[,j])
	mean.out.lambdaM[j] <- mean.pop.out[j] - (1-lambda)*mean.out
	mean.out.lambdaP[j] <- mean.pop.out[j] - (1+lambda)*mean.out
	
	# Summary on clustering structure
	for(k in 1:m){
		clusters[j,k] <- equals(Z[j], Z[k])
	}
	  
}

mean.out <- mean(rho[])

# Constructive DPP
#stick-breaking prior
p[1] <- r[1]
for (j in 2:N-1) {p[j] <- r[j]*(1-r[j-1])*p[j-1]/r[j-1]}
for (k in 1:N-1){ r[k] ~ dbeta(1,alpha)}
#for (k in 1:N-1){ r[k] ~ dbeta(1,alpha+0.001)}
		#added offset to avoid infinite density problems

#assumption to ensure sum p[] is 1 Ishwaran truncation
ps <- sum(p[1:N-1])
for(k in N:N){p[k]<-1-ps}

# Baseline distribution
for(k in 1:N){
	theta[k] ~ dnorm(0,0.04)      #similar to those of mixed-simpleCov.bug
	clusterse[k] ~ dunif(0,10)
	clustertau[k] <- 1/(clusterse[k]*clusterse[k])
	#theta[k] ~ dnorm(basemu, basetau)
	#clustertau[k] ~ dgamma(3,b)
}
for(q in 1:l){beta[q] ~ dnorm(0,0.01)}
#basemu~dnorm(0,0.001)
#basetau<-pow(sigmaF0,-2)
#sigmaF0~dunif(0,100)
#b ~ dgamma(0.03, 0.03)



# DPP parameter prior
#alpha~dunif(0.3,10)
alpha~dunif(0.3,3)

# Programming for calculating summary statistics #
for(i in 1:m) {for (j in 1:N) {
SC[i,j] <- equals(j,Z[i])
} }
# total clusters K
#
for (j in 1:N) {cl[j] <-step(sum(SC[,j])-1)}
K<-sum(cl[])

# Random effects distribution mean#
#for(i in 1:N){mean2[i]<-p[i]*theta[i]}
#poptrue<-sum(mean2[])

# Random effects distribution variance#
#for(i in 1:N){ mom2[i] <- p[i]*theta[i]*theta[i]}
#mom2.true <- sum(mom2[])
#var.true <- mom2.true-(poptrue*poptrue)

#Number of Centres in same cluster#
for(i in 1:m){
	for(j in 1:m){
		equalsmatrix[i,j]<-equals(Z[i],Z[j])
	}
	equalsres[i]<-sum(equalsmatrix[i,])
}
}

